name: Relay external mentions
on: {issue_comment: {types: [created]}}
permissions: {issues: write, contents: read}

jobs:
  relay:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/github-script@v7
      env:
        ORG_PAT: ${{ secrets.ORG_READ_PAT }}
      with:
        script: |
          const relays = {
            'reviewer-relay': 'nm-tagged-reviewers',
            'admin-relay':    'nm-tagged-admins',
            'repo-relay':     null                 // special: repo users
          };

          const cmt = context.payload.comment;
          const hit  = Object.keys(relays)
                       .find(u => cmt.body.includes(`@${u}`));
          if (!hit) return;                        // nothing to do

          const octoOrg = github.getOctokit(process.env.ORG_PAT);
          const org = context.repo.owner;

          async function teamUsers(slug) {
            const {data} = await octoOrg.rest.teams
              .listMembersInOrg({org, team_slug: slug});
            return data.map(u => `@${u.login}`);
          }

          async function repoUsers() {
            const colls = await github.rest.repos
              .listCollaborators({...context.repo, affiliation: 'all'});
            const teams = await github.rest.repos.listTeams(context.repo);
            const teamMembers = (await Promise.all(
              teams.data.map(t => octoOrg.rest.teams
                .listMembersInOrg({org, team_slug: t.slug}))
            )).flatMap(r => r.data);
            return [...new Set(
              [...colls.data, ...teamMembers].map(u => `@${u.login}`))];
          }

          const targets = hit === 'repo-relay'
              ? await repoUsers()
              : await teamUsers(relays[hit]);

          await github.rest.issues.createComment({
            ...context.repo,
            issue_number: context.payload.issue.number,
            body: `ðŸ”” relay from @${cmt.user.login}\n\n${targets.join(' ')}\n\n${cmt.body}`
          });
